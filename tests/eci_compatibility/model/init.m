% Populates the base workspace with definitions needed by SILTest.slx.

SimStep = 0.1; % [sec]

%% Header buses

cellInfo = { 
    { ... 
      'CCSDS_CmdHdr_b', ... 
      '', ...
      'CCSDS Primary and Command Secondary header',...
      'Exported', ...
      { ... 
        % {Name, Dim, Type, Sample time, Complexity, Sample Mode, Dim Mode, Min, Max, Units, Description}
        {'StreamID',2,'uint8',-1,'real','Sample','Fixed',[],[],'',''};...
        {'Sequence',2,'uint8',-1,'real','Sample','Fixed',[],[],'',''};...
        {'PktLen'  ,2,'uint8',-1,'real','Sample','Fixed',[],[],'',''};... 
        {'FcnCode' ,1,'uint8',-1,'real','Sample','Fixed',[],[],'',''};...
        {'ChkSum'  ,1,'uint8',-1,'real','Sample','Fixed',[],[],'',''};...
      } 
    }   
    };
Simulink.Bus.cellToObject(cellInfo);

cellInfo = { 
    { ... 
      'CCSDS_TlmHdr_b', ... 
      '', ...
      'CCSDS Primary and Telemetry Secondary header',...
      'Exported', ...
      { ... 
        % {Name, Dim, Type, Sample time, Complexity, Sample Mode, Dim Mode, Min, Max, Units, Description}
        {'StreamID'   ,2,'uint8' ,-1,'real','Sample','Fixed',[],[],''    ,'Packet identifier including MessageID'                                    };...
        {'Sequence'   ,2,'uint8' ,-1,'real','Sample','Fixed',[],[],''    ,'Bitfield containing packet sequence information'                          };...
        {'PktLen'     ,2,'uint8' ,-1,'real','Sample','Fixed',[],[],'byte',''                                                                         };...
        {'Time_sec'   ,2,'uint16',-1,'real','Sample','Fixed',[],[],'sec' ,'Seconds field of timestamp. Formatted as array to avoid padding in header'};... 
        {'Time_subsec',1,'uint16',-1,'real','Sample','Fixed',[],[],''    ,''                                                                         };...
      } 
    }   
    };
Simulink.Bus.cellToObject(cellInfo);

%% Setup input packet
cellInfo = { 
    { ... 
      'InTlmBus', ... 
      '', ...
      'Tlm message containing inputs to trigger model functionality.',...
      'Exported', ...
      { ... 
              
        {'Header',             1, 'CCSDS_TlmHdr_b', -1,'real','Sample','Fixed',[],[],'',''};...  
        {'AsyncInputVal',      1,'uint8',           -1,'real','Sample','Fixed',[],[],'',''};...  
        {'StatusFlagInputVal', 1,'uint8',           -1,'real','Sample','Fixed',[],[],'',''};...  
        {'CDSInputVal',        1,'double',          -1,'real','Sample','Fixed',[],[],'',''};...  
        {'EventInputVal',      1,'uint16',          -1,'real','Sample','Fixed',[],[],'',''};...  
      } 
    }   
};
Simulink.Bus.cellToObject(cellInfo);
InTlmBus_s = setupCFSPkt('Tlm');

cellInfo = { 
    { ... 
      'InCmdBus', ... 
      '', ...
      'Example command packet.',...
      'Exported', ...
      { ... 
        {'Header', 1, 'CCSDS_CmdHdr_b', -1,'real','Sample','Fixed',[],[],'',''};...  
        {'Arg1',   1, 'double',         -1,'real','Sample','Fixed',[],[],'',''};...  
      } 
    }   
};
Simulink.Bus.cellToObject(cellInfo);
InCmdBus_s = setupCFSPkt('Cmd');
  
%% Setup parameter tables

TblVals.Param1 = 1;
TblVals.Param2 = uint8([0; 1]);
TblVals.Param3 = single(10);

Tbl = createCfsTbl(TblVals, 'Tbl', 'ValidateTbl');
% Note: Table validation function name must be the name of the block which
% implements it in the model, NOT the name of the matlab function.

cellInfo = { 
    { ... 
      'ParamTblBus', ... 
      '', ...
      'No description provided',...
      'Exported', ...
      { ... 
        {'param1', 1,'double',-1,'real','Sample','Fixed',[],[],'','8 bit integer clock for comparison to counter'};...  
        {'param2', 2,'uint8' ,-1,'real','Sample','Fixed',[],[],'','Value of counter whose state is stored in CDS'};...  
        {'param3', 1,'single',-1,'real','Sample','Fixed',[],[],'','Input to accumulator on current cycle'};... 
      } 
    }   
};
Simulink.Bus.cellToObject(cellInfo);
ParamTblBus_s = setupCFSPkt('Tlm');

%% Setup CDS Testing 
uint8_counter_state = setupCDSState();
double_accumulator_state = setupCDSState();

cellInfo = { 
    { ... 
      'CdsDataBus', ... 
      '', ...
      'No description provided',...
      'Exported', ...
      { ... 
        {'saved_counter_value',       1,'uint8'  ,-1,'real','Sample','Fixed',[],[],'','Value of counter whose state is stored in CDS'};...  
        {'unsaved_counter_value',     1,'uint8'  ,-1,'real','Sample','Fixed',[],[],'','Value of counter whose state is not stored in CDS'};...  
        {'accumulator_input',         1,'double' ,-1,'real','Sample','Fixed',[],[],'','Input to accumulator on current cycle'};... 
        {'saved_accumulator_value',   1,'double' ,-1,'real','Sample','Fixed',[],[],'','Value of accumulator with saved state'};...  
        {'unsaved_accumulator_value', 1,'double' ,-1,'real','Sample','Fixed',[],[],'','Value of accumulator without saved state'};...  
      } 
    }   
};
Simulink.Bus.cellToObject(cellInfo);
CdsDataBus_s = setupCFSPkt('Tlm');

%% Conditional Message Testing

cellInfo = { 
    { ... 
      'PeriodicMsgBus', ... 
      '', ...
      'No description provided',...
      'Exported', ...
      { ... 
        {'cycle_counter', 1,'uint8',-1,'real','Sample','Fixed',[],[],'','Count of cycles'};...  
      } 
    }   
};
Simulink.Bus.cellToObject(cellInfo);
PerodicMsgBus_s = setupCFSPkt('Tlm');

cellInfo = { 
    { ... 
      'AyncMsgBus', ... 
      '', ...
      'No description provided',...
      'Exported', ...
      { ... 
        {'conditional_value', 1,'uint8',-1,'real','Sample','Fixed',[],[],'','Will only ever see conditional value here'};...  
      } 
    }   
};
Simulink.Bus.cellToObject(cellInfo);
AyncMsgBus_s = setupCFSPkt('Tlm');

cellInfo = { 
    { ... 
      'ConditionalMsgBus', ... 
      '', ...
      'No description provided',...
      'Exported', ...
      { ... 
        {'sent_periodic_message', 1,'boolean',-1,'real','Sample','Fixed',[],[],'','Flag indicating if periodic message was sent this cycle'};...  
        {'cycle_counter',         1,'uint8',  -1,'real','Sample','Fixed',[],[],'','Cycle counter triggering sending of periodic message'};...  
        {'sent_asyc_message',     1,'boolean',-1,'real','Sample','Fixed',[],[],'','Flag indicating if asynchronous message was sent this cycle'};...  
        {'conditional_value',     1,'uint8',  -1,'real','Sample','Fixed',[],[],'','Input value triggering sending of async message'};...  
      } 
    }   
};
Simulink.Bus.cellToObject(cellInfo);
ConditionalMsgBus_s = setupCFSPkt('Tlm');

%% Status Flag testing

Flag_ID = 1;
cellInfo = { 
    { ... 
      'StatusFlagBus', ... 
      '', ...
      'No description provided',...
      'Exported', ...
      { ... 
        {'flag_set',    1,'boolean',-1,'real','Sample','Fixed',[],[],'','Flag indicating if status flag was set this cycle'};...  
        {'input_value', 1,'uint8',-1,'real','Sample','Fixed',[],[],'','Input value to conditional triggering flag'};...  
      } 
    }   
};
Simulink.Bus.cellToObject(cellInfo);
StatusFlagBus_s = setupCFSPkt('Tlm');

%% Event Flag testing

Event1_ID = 10;
Event1_Type = uint16(1);
Event1_Mask = 1;
Event1_Message = "Value: %f, Value*2: %f, Value*4: %f";
Event1_DataPorts = 3;

Event2_ID = 11;
Event2_Type = uint16(1);
Event2_Mask = 1;
Event2_Message = "Command argument value: %f";
Event2_DataPorts = 1;

cellInfo = { 
    { ... 
      'EventMsgBus', ... 
      '', ...
      'No description provided',...
      'Exported', ...
      { ... 
        {'sending_event1', 1,'boolean',-1,'real','Sample','Fixed',[],[],'','Flag indicating if event1 was sent this cycle'};...  
        {'sending_event2', 1,'boolean',-1,'real','Sample','Fixed',[],[],'','Flag indicating if event2 was sent this cycle'};...  
        {'evt1_value1',    1,'double', -1,'real','Sample','Fixed',[],[],'','Value of first argument in event1'};...  
        {'evt1_value2',    1,'double', -1,'real','Sample','Fixed',[],[],'','Value of second argument in event1'};...  
        {'evt1_value3',    1,'double', -1,'real','Sample','Fixed',[],[],'','Value of thrid argument in event1'};...  
        {'evt2_value1',    1,'double', -1,'real','Sample','Fixed',[],[],'','Value of first argument in event2'};...  
      } 
    }   
};
Simulink.Bus.cellToObject(cellInfo);
EventMsgBus_s = setupCFSPkt('Tlm');

%% Time testing

Time_epoch = 100;
cellInfo = { 
    { ... 
      'TimeBus', ... 
      '', ...
      'No description provided',...
      'Exported', ...
      { ... 
        {'fsw_time',         1,'double',-1,'real','Sample','Fixed',[],[],'',''};...  
        {'elapsed_sim_time', 1,'double',-1,'real','Sample','Fixed',[],[],'',''};...  
      } 
    }   
};
Simulink.Bus.cellToObject(cellInfo);
TimeBus_s = setupCFSPkt('Tlm');

%%

